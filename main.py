from __future__ import annotations

import asyncio
import logging
import os
import sys
from datetime import datetime, timezone
from pathlib import Path
from typing import Iterable, List

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  make project importable  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ROOT_DIR = Path(__file__).resolve().parent
if str(ROOT_DIR) not in sys.path:
    sys.path.insert(0, str(ROOT_DIR))

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  local imports  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
from bot.db import already_seen, connect, db_is_empty, mark_seen
from bot.telegram import send
from bot.core import dp  # noqa: F401  (–Ω–∞ –±—É–¥—É—â–µ–µ, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è —Ö–µ–Ω–¥–ª–µ—Ä—ã)

# CMS-–∞–Ω–æ–Ω—Å–µ—Ä—ã
from bot.ann_cms.binance import BinanceAnnouncer
from bot.ann_cms.bybit import BybitAnnouncer
from bot.ann_cms.okx import OKXAnnouncer
from bot.ann_cms.bitget import BitgetAnnouncer

# REST-fetchers
from bot.ann_api.binance import get_new_symbols as api_binance
from bot.ann_api.bybit import get_new_symbols as api_bybit
from bot.ann_api.okx import get_new_symbols as api_okx
from bot.ann_api.bitget import get_new_symbols as api_bitget
from bot.ann_api.symbol import Symbol  # dataclass

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  settings  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
POLL_INTERVAL_API = int(os.getenv("POLL_INTERVAL_API", "60"))   # —Å–µ–∫—É–Ω–¥
POLL_INTERVAL_CMS = int(os.getenv("POLL_INTERVAL_CMS", "90"))

CMS_ANNOUNCERS: Iterable[type] = (
    BinanceAnnouncer,
    BybitAnnouncer,
    OKXAnnouncer,
    BitgetAnnouncer,
)

API_FETCHERS: dict[str, callable[[], "asyncio.Future[List[Symbol]]"]] = {
    "Binance": api_binance,
    "Bybit": api_bybit,
    "OKX": api_okx,
    "Bitget": api_bitget,
}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  bootstrap phase  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def bootstrap(db) -> None:
    """–û–¥–Ω–æ–∫—Ä–∞—Ç–Ω–æ–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—É—Å—Ç–æ–π –ë–î –±–µ–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
    logging.info("Bootstrap: filling empty DB ‚Ä¶")

    # 1. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –ø–∞—Ä—ã –∏–∑ REST-API
    for exchange, fetcher in API_FETCHERS.items():
        for sym in await fetcher():
            await mark_seen(db, exchange, sym.name, sym.market_type, "api")
    logging.info("Bootstrap: API pairs stored.")

    # 2. –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∏ –∏–∑ CMS
    now = datetime.now(timezone.utc)
    for cls in CMS_ANNOUNCERS:
        announcer = cls()
        async for ann in announcer.fetch():
            ts = getattr(ann, "listing_time", None) or getattr(
                ann, "starts_at", None
            )
            if ts is not None and ts <= now:
                continue  # —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ
            await mark_seen(db, ann.exchange, ann.symbol, "Unknown", "cms")
    logging.info("Bootstrap: CMS announcements stored.")
    logging.info("Bootstrap finished ‚Äî monitoring starts.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  runners  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def _runner_cms(cls, db):
    """–ß–∏—Ç–∞–µ—Ç CMS-–∞–Ω–Ω–æ–Ω—Å—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –ª–∏—Å—Ç–∏–Ω–≥–∏."""
    announcer = cls()
    while True:
        async for ann in announcer.fetch():
            ts = getattr(ann, "listing_time", None) or getattr(
                ann, "starts_at", None
            )
            if ts is not None and ts <= datetime.now(timezone.utc):
                continue  # —É—Å—Ç–∞—Ä–µ–ª–æ
            market = "Unknown"
            if await already_seen(db, ann.exchange, ann.symbol, market):
                continue
            await mark_seen(db, ann.exchange, ann.symbol, market, "cms")
            logging.info("CMS new: %s ‚Äî %s", ann.exchange, ann.symbol)
            await send(
                f"üì∞ <b>{ann.exchange}</b> –ø–ª–∞–Ω–∏—Ä—É–µ—Ç –ª–∏—Å—Ç–∏–Ω–≥ "
                f"<code>{ann.symbol}</code>\n{ann.url}"
            )
        await asyncio.sleep(POLL_INTERVAL_CMS)


async def _runner_api(exchange: str, fetcher, db):
    """–û–ø—Ä–∞—à–∏–≤–∞–µ—Ç REST-API –±–∏—Ä–∂–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –ª–æ–≥–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ –ø–∞—Ä—ã."""
    while True:
        for sym in await fetcher():
            if await already_seen(db, exchange, sym.name, sym.market_type):
                continue
            await mark_seen(db, exchange, sym.name, sym.market_type, "api")
            logging.info(
                "API new: %s ‚Äî %s (%s)", exchange, sym.name, sym.market_type
            )
            await send(
                f"‚ö°Ô∏è <b>{exchange}</b> –¥–æ–±–∞–≤–∏–ª –ø–∞—Ä—É "
                f"<code>{sym.name}</code> ({sym.market_type})"
            )
        await asyncio.sleep(POLL_INTERVAL_API)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  main  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def main() -> None:
    db = await connect()

    # Bootstrap, –µ—Å–ª–∏ –±–∞–∑–∞ –ø—É—Å—Ç–∞
    if await db_is_empty(db):
        await bootstrap(db)

    tasks = [
        # CMS-–∞–Ω–æ–Ω—Å–µ—Ä—ã
        *(asyncio.create_task(_runner_cms(cls, db)) for cls in CMS_ANNOUNCERS),
        # REST-–º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        *(
            asyncio.create_task(_runner_api(exch, fetcher, db))
            for exch, fetcher in API_FETCHERS.items()
        ),
        # –ï—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è Telegram-—Ö–µ–Ω–¥–ª–µ—Ä—ã:
        # asyncio.create_task(dp.start_polling()),
    ]
    await asyncio.gather(*tasks)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  entry-point  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("CriptaBot stopped.")